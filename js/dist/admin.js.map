{"version":3,"file":"admin.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,mBCAlF,MAAM,EAA+BI,OAAOC,KAAKC,OAAO,a,aCIlDC,EAAoB,kCAE1BC,IAAAA,aAAiBC,IAAI,mBAAmB,WACtC,IAAMC,EAAgBF,IAAAA,cAAiB,IAAK,mBAE5C,CAAC,IAAK,IAAK,IAAK,KAAKG,KAAI,SAACC,GACxBF,EAAcG,gBAAgB,CAC5BC,QAAYC,6BAAuBH,EAAK,YACxCI,MAAOR,IAAAA,WAAeS,MAASV,EAAiB,SAASK,GACzDM,YAAaV,IAAAA,WAAeS,MAASV,EAAiB,iCACtDY,KAAM,WACNC,KAAM,IAEV,GACF,G","sources":["webpack://@fof/html-errors/webpack/bootstrap","webpack://@fof/html-errors/webpack/runtime/compat get default export","webpack://@fof/html-errors/webpack/runtime/define property getters","webpack://@fof/html-errors/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/html-errors/external root \"flarum.core.compat['admin/app']\"","webpack://@fof/html-errors/./src/admin/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","import app from 'flarum/admin/app';\n\n// Keeping the old flagrow settings prefix because it's easier\nconst settingsPrefix = 'flagrow-html-errors.';\nconst translationPrefix = 'fof-html-errors.admin.settings.';\n\napp.initializers.add('fof-html-errors', () => {\n  const extensionData = app.extensionData.for('fof-html-errors');\n\n  [403, 404, 500, 503].map((error) => {\n    extensionData.registerSetting({\n      setting: `${settingsPrefix}custom${error}ErrorHtml`,\n      label: app.translator.trans(`${translationPrefix}error.${error}`),\n      placeholder: app.translator.trans(`${translationPrefix}placeholder.empty_for_default`),\n      type: 'textarea',\n      rows: 10,\n    });\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","flarum","core","compat","translationPrefix","app","add","extensionData","map","error","registerSetting","setting","settingsPrefix","label","trans","placeholder","type","rows"],"sourceRoot":""}